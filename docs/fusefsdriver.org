* FUSE File System Driver
** Overview
FUSE is a library and set of kernel extensions for your operating system that
allow file systems to run in user-space. Implementations such as [[https://osxfuse.github.io][FUSE for macOS]]
exist and allow users to install and use these user-space file system drivers. I
have provided a FUSE driver as part of this project. This allows the user to use
my distributed file system with all of the existing applications on their
computer.

** Implemented FUSE Features
The FUSE driver is implemented using the [[https://hackage.haskell.org/package/HFuse][HFuse]] Haskell bindings. The main file
system actions that you would expect such as read, list directory and write file
are all implemented.

** Authentication
The FUSE driver performs all actions according to the protocol defined in the
previous sections. This includes authentication. The driver ensures that a user
correctly signs into the system before it will mount the file system on the
mount point.

Following on from that, all requests are made using the authenticated user's
token so that the backend services can properly verify that the user has
permission to carry out the file system action that they are attempting.

** Limitations
Unfortunately there are a few bugs with my implementation. Files written using
the FUSE driver have to be a maximum of 4KB large. This does not apply when
using the API directly. This is because FUSE drivers receive file writes in 4KB
blocks and my implementation is yet to handle collecting these into a single
write to the appropriate file node.

Another bug is in file truncation. If editing a file results only in a reduction
of bytes at the end the system will fail to properly truncate it. Saving should
only be done so that it would increase the number of bytes in the file.
