* High-level System Architecture and Design
The approach taken in the design of this system is very similar to that of the
Andrew File System (AFS). In the system created I placed an emphasis on the
simple model of last write wins. This ensures an always consistent view at the
contents of a particular file however may introduce issues to do with lost
writes should a client fail to win the write race.

The system was implemented as a set of Haskell REST services implemented using
the [[https://hackage.haskell.org/package/servant][~servant~]] library to define the APIs of each service. These services
included a file service that I was able to create multiple copies of using
Docker and Docker Compose, a directory service and an authentication service. An
auxiliary database migration service was created to ensure database consistency.
Of course this also implies the use of a database system. I chose to use the
robust Postgresql RDBMS with the tried and tested ~persistent~ Haskell package
to interface with it.

A number of shared data models were necessary to create to model the different
kinds of values of entities involved in the system. The following schema diagram
relates the file, node, and user tables as they appear in my system.
[[file:img/schema.png]]
